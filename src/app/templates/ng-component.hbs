import { ReactWrapperComponent } from '@angular-react/core';
import {
  ChangeDetectionStrategy,
  ChangeDetectorRef,
  Component,
  ElementRef,
  EventEmitter,
  Input,
  Output,
  Renderer2,
  ViewChild,
} from '@angular/core';
import { {{displayName}}Props } from '../{{importPath}}';

@Component({
  selector: 'app-{{name}}',
  exportAs: 'app{{displayName}}',
  template: `
    <{{displayName}}
      #reactNode
      {{#each inputProps}}
      [{{this.name}}]="{{this.name}}""
      {{/each}}
      {{#each outputProps}}
      ({{this.name}})="{{this.name}}Handler($event)"
      {{/each}}
      >
      <ReactContent><ng-content></ng-content></ReactContent>
    </{{displayName}}>
  `,
  styles: ['react-renderer'],
  changeDetection: ChangeDetectionStrategy.OnPush,
})
export class {{displayName}}Component extends ReactWrapperComponent<{{displayName}}Props> {
  @ViewChild('reactNode') protected reactNodeRef: ElementRef;

  {{#each inputProps}}
  @Input() {{this.name}}: {{../displayName}}Props['{{this.name}}'];
  {{/each}}

  {{#each outputProps}}
  // tslint:disable-next-line:no-output-on-prefix
  @Output() readonly {{this.name}} = new EventEmitter();
  {{/each}}

  constructor(elementRef: ElementRef, changeDetectorRef: ChangeDetectorRef, renderer: Renderer2) {
    super(elementRef, changeDetectorRef, renderer);

    // coming from React context - we need to bind to this so we can access the Angular Component properties
    {{#each outputProps}}
    this.{{this.name}}Handler = this.{{this.name}}Handler.bind(this);
    {{/each}}
  }

  {{#each outputProps}}
  {{this.name}}Handler(ev?) {
    this.{{this.name}}.emit(ev.nativeEvent);
  }
  {{/each}}
}
